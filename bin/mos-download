#!/bin/sh

# sam.k.tan@oracle.com / samktan@gmail.com

# This script is a modification of the wget.sh file generated by MOS
# After you invoke it from the command line, it will prompt for your SSO login
# Then you enter the URLs one at a time each followed by a return
# To exit you type Ctrl-D
# You can also pipe in a file with one URL per line

LANG=C
export LANG

PATH=/usr/local/bin:/usr/bin:/bin:$PATH
export PATH

# set proxy servers as required
# examples below for OWAN
export http_proxy=www-proxy.us.oracle.com:80
export https_proxy=www-proxy.us.oracle.com:80
export no_proxy=signon.oracle.com,signon-int.oracle.com,identity.oraclecloud.com


# Trap to cleanup cookie file in case of unexpected exits.
trap 'rm -f $COOKIE_FILE; exit 1' 1 2 3 6

# Path to wget command
WGET="`which wget`"

if [ -z "$WGET" ]; then
	echo "wget not found."
	exit 1
else
	echo "Using wget at $WGET"
fi

GREP="/usr/gnu/bin/grep"
if [ -z "$GREP" ]; then
	echo "GNU grep not found."
	exit 1
else
	echo "using grep at $GREP"
fi

# Log directory and file
LOGDIR=.
LOGFILE=$LOGDIR/wget-log-$(date +%Y-%m-%d_%H:%M:%S).log
echo "Writing to log file $LOGFILE"

# SSO username
printf 'SSO Username: '
read SSO_USERNAME < /dev/tty

printf 'SSO Password: '


# Location of cookie file
COOKIE_FILE=$(mktemp -t wget_sh_XXXXXX) >> "$LOGFILE" 2>&1
if [ $? -ne 0 ] || [ -z "$COOKIE_FILE" ]; then
	echo "Temporary cookie file creation failed. See $LOGFILE for more details." |  tee -a "$LOGFILE"
	exit 1
fi
echo "Created temporary cookie file $COOKIE_FILE" >> "$LOGFILE"

# Output directory and file
OUTPUT_DIR=.

#
# End of user configurable variable
#

# The following command to authenticate uses HTTPS. This will work only if the wget in the environment
# where this script will be executed was compiled with OpenSSL. 
#
$WGET  --secure-protocol=auto --save-cookies="$COOKIE_FILE" --keep-session-cookies  --http-user "$SSO_USERNAME" --ask-password  "https://updates.oracle.com/Orion/Services/download" -O /dev/null 2>> "$LOGFILE"

# Verify if authentication is successful
if [ $? -ne 0 ]; then
	echo "Authentication failed with the given credentials." | tee -a "$LOGFILE"
	echo "Please check logfile: $LOGFILE for more details."
	exit 1
else
	echo "Authentication is successful. Proceeding with downloads..." | tee -a "$LOGFILE"
fi

echo "\n"

echo "Enter URLs one at a time and press RETURN, type Ctrl-D to exit."
while IFS='' read inputline; do
	# remove blank lines and lines that start with hash (h)
	url="`echo $inputline | grep -v '^#.*' | sed '/^$/d'`"
	# scan each line and extract only the URL
	url="`echo $url | $GREP -o -E '(https://updates.oracle.com/Orion/Services/download/[^ ]+)' | sed 's/\"//g'`"

	if [ ! -z "$url" ]; then
		patchfile="`echo $url | grep '://' |  cut -d '?' -f 2 | awk -F'&' '/patch_file=/ {print $2}' | cut -d'&' -f 1 | cut -d'=' -f 2`"
		filename="`echo $url | grep '://' |  cut -d '?' -f 2 | awk -F'&' '/fileName=/ {print $1}' | cut -d'&' -f 1 | cut -d'=' -f 2`"
		if [ -z "$patchfile" ]; then
			patchfile="$filename"
		fi
		if [ -z "$patchfile" ]; then
			echo "No patchfile name found in URL, try again."
		else
			echo "Downloading $patchfile from $url" >> $LOGFILE
			echo "Downloading $patchfile ..."
			$WGET --background --load-cookies="$COOKIE_FILE" "$url" -O "$OUTPUT_DIR/$patchfile" -o "$OUTPUT_DIR/${patchfile}.log" >> "$LOGFILE" 2>&1 
		fi
	echo "Next URL ... (Ctrl-D when done)"
	fi
done

# Cleanup
rm -f "$COOKIE_FILE"
echo "Removed temporary cookie file $COOKIE_FILE" >> "$LOGFILE"

# END OF SCRIPT - SKT

