#!/bin/bash

echo "MOS Utility by sam.k.tan@oracle.com"
if [[ $# -eq 0 ]]; then
    echo "${0##*/} status | upload | download"
    exit 1
fi

DATECMD="/usr/gnu/bin/date"
GREPCMD="/usr/gnu/bin/grep"
WGETCMD="/usr/bin/wget"
CURLCMD="/usr/bin/curl"

# LANG=C
# export LANG

# PATH=/usr/local/bin:/usr/bin:/bin:$PATH
# export PATH

# set proxy servers as required
# examples below for OWAN
export http_proxy=www-proxy.us.oracle.com:80
export https_proxy=www-proxy.us.oracle.com:80
export no_proxy=signon.oracle.com,signon-int.oracle.com,identity.oraclecloud.com


s () {
    echo "Status of moswget downloads based on *.log files ..."
    wgetc=$(ps -e -o comm | ${GREPCMD} -i wget | wc -l)
    printf "wget instances running: %d\n" ${wgetc}

    for f in `ls *.zip.log`; do
        # echo $f
        name=$(basename $f '.log')
        age=$(($(${DATECMD} +%s) - $(${DATECMD} -r "$f" +%s)))
        n=$(cat ${f} | ${GREPCMD} '100%')
        if [ $? -eq 0 ]
        then
            printf "DONE:  %s \n\n" ${name}
        elif [ ${age} -gt 3600 ]
        then
            printf "STALLED:  %s\n\n" ${name}
        else
            printf "RUNNING:  %s  (progress / bandwidth / time remaining)\n" ${name}
            cat ${f} | ${GREPCMD} '%' | tail -1
        fi
    done
}


u () {
    [ -z $1 ] &&  echo "${0##*/} <file to upload>" && exit 1
    p=$(realpath "$1")

    [ ! -f "${p}" ] && echo "${p} is not a file." && exit 1

    printf "SR: "; read s
    printf "Login: "; read l
    u="https://transport.oracle.com/upload/issue/${s}/"
    ${CURLCMD} --verbose --progress-bar --user ${l} --upload-file "${p}" ${u}
}


d () {
    # Trap to cleanup cookie file in case of unexpected exits.
    trap 'rm -f $COOKIE_FILE; exit 1' 1 2 3 6

    LOGDIR=.
    LOGFILE=$LOGDIR/wget-log-$(${DATECMD} +%Y-%m-%d_%H:%M:%S).log
    echo "Writing to log file $LOGFILE"
    OUTPUT_DIR=.

    COOKIE_FILE=$(mktemp -t wget_sh_XXXXXX) >> "$LOGFILE" 2>&1
    if [ $? -ne 0 ] || [ -z "$COOKIE_FILE" ]; then
        echo "Temporary cookie file creation failed. See $LOGFILE for more details." |  tee -a "$LOGFILE"
        exit 1
    fi
    echo "Created temporary cookie file $COOKIE_FILE" >> "$LOGFILE"

    # The following command to authenticate uses HTTPS. This will work only if the wget in the environment
    # where this script will be executed was compiled with OpenSSL. 
    #
    # SSO username
    printf 'SSO Username: '
    read SSO_USERNAME < /dev/tty
    printf 'SSO Password: '
    ${WGETCMD}  --secure-protocol=auto --save-cookies="$COOKIE_FILE" --keep-session-cookies  --http-user "$SSO_USERNAME" --ask-password  "https://updates.oracle.com/Orion/Services/download" -O /dev/null 2>> "$LOGFILE"

    # Verify if authentication is successful
    if [ $? -ne 0 ]; then
        echo "Authentication failed with the given credentials." | tee -a "$LOGFILE"
        echo "Please check logfile: $LOGFILE for more details."
        exit 1
    else
        echo "Authentication is successful. Proceeding with downloads..." | tee -a "$LOGFILE"
    fi
    printf "\n"

    echo "Enter URLs one at a time and press RETURN, type Ctrl-D to exit."
    while IFS='' read inputline; do
        # scan for lines that contain this specific URL format
        if [[ $inputline =~ https://updates.oracle.com/Orion/Services/download/[^\ \"]+ ]]; then
            url="${BASH_REMATCH[0]}"
            # scan for a patchfile parameter
            patchfile="" && [[ $url =~ patch_file=([^\ \&\"]+) ]] && patchfile="${BASH_REMATCH[1]}"
            # scan for a filename parameter
            filename="" && [[ $url =~ fileName=([^\ \&\"]+) ]] && filename="${BASH_REMATCH[1]}"
            # if there is no patchfile parameter, use the filename parameter
            [ -z $patchfile ] && patchfile="$filename"

            if [ -z "$patchfile" ]; then
                echo "No patchfile name found in URL, try again."
            else
                echo "Downloading $patchfile from $url" >> $LOGFILE
                echo "Downloading $patchfile ..."
                ${WGETCMD} --background --load-cookies="$COOKIE_FILE" "$url" -O "$OUTPUT_DIR/$patchfile" -o "$OUTPUT_DIR/${patchfile}.log" >> "$LOGFILE" 2>&1 
            fi
            echo "Next URL ... (Ctrl-D when done)"
        fi
    done

    # Cleanup
    rm -f "$COOKIE_FILE"
    echo "Removed temporary cookie file $COOKIE_FILE" >> "$LOGFILE"
}


case $1 in
    status)
        shift
        s $*
        ;;
    upload)
        shift
        u $*
        ;;
    download)
        shift
        d $*
        ;;
    *)
        echo "Unknown command: $1"
        ;;
esac
